app/
├── _layout.tsx                  // Root layout: wraps AuthProvider and defines top–level navigation
├── index.tsx                    // (Optional) Entry point (could be a redirect or splash)
├── (auth)/                     // Public (unauthenticated) screens
│   ├── _layout.tsx              // Auth stack layout (e.g., common styling for sign–in/up)
│   ├── sign-in.tsx              // Sign In screen
│   └── sign-up.tsx              // Sign Up screen (with role selection)
└── (app)/                      // Protected screens (require authentication)
    ├── _layout.tsx              // Protected layout: checks auth status and renders the app stack
    ├── index.tsx                // Role–based redirect: sends user to Regular or Realtor home based on role
    ├── profile.tsx              // Profile screen (e.g., displays user info and sign–out)
    ├── regular/                // Screens for Regular (Customer) users
    │   └── index.tsx            // Customer Home: browse/filter apartment listings
    ├── realtor/                // Screens for Realtor users
    │   ├── index.tsx            // Realtor Home: list of “My Listings”
    │   ├── new-listing.tsx      // Add New Listing screen (form for Realtors)
    │   └── edit/                // Folder for Edit Listing screens
    │         └── [id].tsx       // Edit Listing screen (dynamic route; [id] is the listing ID)
    └── listing/                // Shared screen for Listing Details (accessible by both roles)
          └── [id].tsx           // Listing Details screen (dynamic route)
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBxqFpCmV8izMxRFVMaSFJ7I2uYFZ3wA_k",
  authDomain: "plotcom-8f1e6.firebaseapp.com",
  projectId: "plotcom-8f1e6",
  storageBucket: "plotcom-8f1e6.firebasestorage.app",
  messagingSenderId: "612599298826",
  appId: "1:612599298826:web:13b68102db1e7c839cd8f3"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// app/(app)/regular/index.jsx
import React, { useEffect, useState } from "react";
import { View, Button, Text, FlatList, StyleSheet } from "react-native";
import { collection, onSnapshot, query, orderBy } from "firebase/firestore";
import { db } from "../../../firebaseConfig";
import { useRouter } from "expo-router";
import CustomInput from "../../../components/CustomInput";
import ListingCard from "../../../components/ListingCard";
import Header from "../../../components/Header";
export default function CustomerHomeScreen() {
  const router = useRouter();
  const [listings, setListings] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    // Query listings ordered by description (or any field you choose)
    const q = query(collection(db, "listings"), orderBy("description"));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setListings(data);
    });
    return () => unsubscribe();
  }, []);

  // Filter listings by a search term on the description field
  const filteredListings = listings.filter((item) => {
    const term = search.toLowerCase();
    return item.description.toLowerCase().includes(term);
  });
  const filteredListingsRoom = listings.filter((item) => {
    const term = search.toLowerCase();
    return item.rooms.toString().includes(term);
  });

  const renderListing = ({ item }) => (
    <ListingCard
      item={item}
      onPress={() => router.push(`/listing/${item.id}`)}
    />
  );

  return (
    <View style={styles.container}>
      <Header title="Browse Listings" router={router} />
      <CustomInput
        style={styles.searchBox}
        placeholder="Filter by description & Room"
        value={search}
        onChangeText={setSearch}
      />
      <FlatList
        data={
          filteredListings.length > 0 ? filteredListings : filteredListingsRoom
        }
        keyExtractor={(item) => item.id}
        renderItem={renderListing}
        ListEmptyComponent={
          <Text style={styles.empty}>No listings found.</Text>
        }
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: "#fff" },
  header: { fontSize: 20, fontWeight: "600", marginBottom: 8 },
  searchBox: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 4,
    margin: 12,
  },
});
